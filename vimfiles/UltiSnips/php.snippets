## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet array "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet def "def"
define('${1:CONST}', ${2:value});${3}
endsnippet

snippet const "Class constant" !b
const ${1:CONSTANT_NAME} = ${2:'${3:value}'};
endsnippet

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});"
endsnippet

snippet doc_f "doc_f"
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 */
${1:public }function ${2:someFunc}(${3})
{${6}
}
endsnippet

snippet doc_i "doc_i"
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 */
interface ${1:someClass}
{${4}
} // END interface $1"
endsnippet

snippet doc_fp "DocBlock for existing function/method" b
/**
 * ${1:Method description}
 *
 * @return ${2:void}
 * @author ${3:`!v g:snips_author`}
 */$0
endsnippet

snippet doc_pp "DocBlock for existing class property" b
/**
 * ${1:Property description}
 *
 * @var ${2:type}
 */
endsnippet

snippet doc_v "Class property" !b
/** @var ${1:type} */$0
endsnippet

snippet doc_cp "DocBlock for existing class" b
/**
 * ${1:Class description}
 *
 * @author ${3:`!v g:snips_author`}
 */
endsnippet

snippet @par "DocBlock @param tag"
@param ${1:type} $${2:name} ${3:description}
endsnippet

snippet @auth "Author"
@author ${1:`!v g:snips_author`}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}){
	${4:// code...}
}
endsnippet

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet if "if"
if (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet post "post"
$_POST['${1}']${2}
endsnippet

snippet req1 "req1"
require_once '${1:file}';${2}
endsnippet

snippet session "session"
$_SESSION['${1}']${2}
endsnippet

snippet tern "ternary operator"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" !b
/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;$2
}
$4
endsnippet

snippet setter "PHP Class Setter" !b
/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;$3
    ${4:return $this;}
}
$0
endsnippet

snippet gs "PHP Class Getter Setter" !b
protected${1: static} $${2:_property} = ${3:value};

/**
 * Getter for $2 property
 *
 * @return $5
 */
public$1 function get${2/_?([a-z0-9]+)/\u$1/i}()
{
    return `!p snip.rv = 'self::$' if t[1] == ' static' else '$this->'`$2;$4
}

/**
 * Setter for $2 property
 *
 * @param ${5:type} $${2/_?([a-z0-9]+)/$1/i} ${6:property description}
 * @return void
 */
public$1 function set${2/_?([a-z0-9]+)/\u$1/i}($${2/_?([a-z0-9]+)/$1/i})
{
    `!p snip.rv = 'self::$' if t[1] == ' static' else '$this->'`$2 = $${2/_?([a-z0-9]+)/$1/i};$7
    ${8:return $this;}
}
$0
endsnippet

snippet pub "Public function" !b
public function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}$0
endsnippet

snippet prop "Class property" !b
${1:protected}${2: static} $`!p snip.rv = '_' if t[1] == 'protected' else ''`${3:name}${4: = ${5:value}};$0
endsnippet

snippet pro "Protected function" !b
protected function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pri "Private function" !b
private function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pubs "Public static function" !b
public static function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pros "Protected static function" !b
protected static function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pris "Private static function" !b
private static function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet fu "Function snip" !b
function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet
# :vim:ft=snippets

snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}){
    ${VISUAL}${4}
}
$0
endsnippet

snippet new "New class instance" !b
$$1 = new $1($2);
$0
endsnippet


snippet ife "if else"
if (${1:/* condition */}) {
    ${2:// code...}
} else {
    ${3:// code...}
}
$0
endsnippet


snippet classr "Class declaration template" !b
/**
 * Class ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`}
 * @author $2
 */
class $1
{
    public function ${3:__construct}(${4:$options})
    {
        ${4:// code}
    }
}
$0
endsnippet

snippet pr "Dumb debug helper in HTML"
echo '<pre>' . var_export($1, 1) . '</pre>';$0
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);$0
endsnippet

# Symfony 2 based snippets
snippet sfa "Symfony 2 Controller action"
/**
* @Route("/${1:route_name}", name="$1")
* @Template()
*/
public function $1Action($2)
{
    $3
    return ${4:array();}$0
}
endsnippet

# Zend Framework related

snippet zca "Zend Action Controller" !b
class ${1:Namespace}_${2:ControllerName}Controller extends Zend_Controller_Action
{
    public function init()
    {
    }

    public function ${3:index}Action()
    {
    }
}$0
endsnippet

snippet zt "Zend_Db_Table" !b
class ${1:Table_Name} extends Zend_Db_Table
{
    protected $_name = '${2:table_name}';
    protected $_primary = '${3:id}';
    protected $_sequence = ${4:true};$0
}
endsnippet

snippet ztr "Zend_Db_Table_Row" !b
class ${1:Table_Row_Name} extends Zend_Db_Table_Row_Abstract
{
}$0
endsnippet

snippet ztrme "Zend Table referenceMap entry"
'${1:ReferenceName}' => array(
    'columns' => '${2:colName}',
    'refTableClass' => '${3:tableClassName}',
    'refColumns' => '${4:refColName}'
),$0
endsnippet

snippet todo "TODO" !b
// TODO: ${1:todo stuff}
endsnippet

snippet zdbg "Zend Debug"
Zend_Debug::dump(${1});
endsnippet

snippet /** "Comment block" !b
/**
 * $0
 */
endsnippet

snippet zfva "Zend Form Element validators" !b
'validators' => array(
    '${1:name}' => array(
        'validator' => '${2:name}',$0
    ),
),
endsnippet

snippet zfve "Zend Form Element validators entry" !b
'${1:name}' => array(
    'validator' => '${2:name}',$0
),
endsnippet

snippet zfvo "Zend Form Element validators options" !b
'options' => array(
    ${1:'messages' => array(
        ${2:'${3:messageName}'} => '${4:message text}',
    ),}
),
endsnippet

# :vim:ft=snippets:

