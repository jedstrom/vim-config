###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function (element) {
	$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function (${3:attribute}) {
	$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) ,,{
	${0:// body...}
};
endsnippet

snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--){
	${3:$1[$2]}$0
};
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}$0
};
endsnippet

snippet fun "function (fun)"
function ${1:function_name} (${2:argument}) {
	${0:// body...}
}
endsnippet

snippet ife "if ___ else"
if (${1:true}) {
    $2
} else {
    $0
};
endsnippet

snippet if "if"
if (${1:true}) {
    $0
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {$0}${2:}, ${1:10});
endsnippet

snippet var "variable declaration" b
var ${1:name} = $0
endsnippet

snippet iife "Immediately invoked function expression"
(function(${3:innerArg}) {
    ${0:return ....;}
}(${4:outerArg}));
endsnippet

snippet doc_file "File doc block" !b
/**
 * @fileOverview  ${1:File description}
 *
 * @author ${2:`!v g:snips_author`}
 * @version ${3:1.0}
 */
endsnippet

snippet doc_cp "Class" !b
/**
 * ${1:Class description}
 *
 * @class
 * @author ${2:`!v g:snips_author`}
 */
endsnippet

snippet doc_mp "Method" !b
/**
 * ${1:Method description}
 *
 * @author ${2:`!v g:snips_author`}
 * @public
 */
endsnippet

snippet @con "Constructor"
@constructor
endsnippet

snippet @par "Param"
@param ${1:paramType} ${2:paramName} ${3:param description}
endsnippet

snippet @paro "Optional Param"
@param ${1:paramType} [${2:paramName}] ${3:param description}
endsnippet

snippet doc_pp "Property" !b
/**
 * ${1:Property description}
 *
 * @type ${2:type}
 */
endsnippet

snippet reqmod "RequireJS Module" !b
define(
    [
        ${1:'${2:dependency}',}${3:}
    ],
    function (
        ${4:$2}
    ) {${5}
    }$0
);
endsnippet


# vim:ft=snippets:
